{"version":3,"sources":["App.js","index.js"],"names":["App","React","memo","props","useState","s","setS","m","setM","h","setH","status","setStatus","touchTime","setTouchTime","useEffect","sub","interval","pipe","takeWhile","subscribe","v","actual","zeroingStopwatch","unsubscribe","className","start","stop","reset","wait","Date","getTime","runContinue","Display","Buttons","isStopButton","onClick","id","AppWrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAOMA,EAAMC,IAAMC,MAAK,SAACC,GAEtB,MAAkBC,mBAAS,GAA3B,mBAAOC,EAAP,KAAUC,EAAV,KACA,EAAkBF,mBAAS,GAA3B,mBAAOG,EAAP,KAAUC,EAAV,KACA,EAAkBJ,mBAAS,GAA3B,mBAAOK,EAAP,KAAUC,EAAV,KACA,EAA4BN,mBAAS,QAArC,mBAAOO,EAAP,KAAeC,EAAf,KACA,EAAkCR,mBAAS,GAA3C,mBAAOS,EAAP,KAAkBC,EAAlB,KAGAC,qBAAU,WAER,IAAIC,EAAMC,YAAS,KAAMC,KACvBC,aAAU,iBAAiB,QAAXR,GAA+B,UAAXA,GAAiC,aAAXA,MAC1DS,WAAU,SAACC,GACXf,GAAK,SAACgB,GAAD,OAAYA,EAAS,QAO5B,MAJe,SAAXX,GAAgC,aAAXA,GACvBY,IAGK,WACLP,EAAIQ,iBAGL,CAACb,IAEJ,IAAMY,EAAmB,WACvBjB,EAAK,GACLE,EAAK,GACLE,EAAK,IAIG,KAANL,IACFC,EAAK,GACLE,GAAK,SAAAc,GAAM,OAAIA,EAAS,MAEhB,KAANf,IACFC,EAAK,GACLE,GAAK,SAAAY,GAAM,OAAIA,EAAS,MAqC1B,OACE,qBAAKG,UAAU,MAAf,SACE,gCACE,2CACA,cAAC,EAAD,CAASpB,EAAGA,EAAGE,EAAGA,EAAGE,EAAGA,IACxB,cAAC,EAAD,CACEiB,MAvCM,WACZd,EAAU,QAuCJD,OAAQA,EACRN,EAAGA,EACHsB,KArCK,WACXf,EAAU,SAqCJgB,MAjCM,WACZL,IACAX,EAAU,UAgCJiB,KA5BK,WACO,IAAdhB,EACFC,GAAa,IAAIgB,MAAOC,YAEpB,IAAID,MAAOC,UAAYlB,EAAY,IACrCD,EAAU,QAEVE,GAAa,IAAIgB,MAAOC,YAsBtBC,YAhBY,WAClBpB,EAAU,uBAsBRqB,EAAU,SAAC,GAAe,IAAd5B,EAAa,EAAbA,EAAGE,EAAU,EAAVA,EAAGE,EAAO,EAAPA,EACtB,OACE,sBAAKgB,UAAU,QAAf,UACE,+BAAOhB,GAAK,GAAKA,EAAI,IAAMA,IAD7B,YAGE,+BAAOF,GAAK,GAAKA,EAAI,IAAMA,IAH7B,YAKE,+BAAOF,GAAK,GAAKA,EAAI,IAAMA,QAK3B6B,EAAU,SAAC,GAAqD,IAApDR,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,KAAME,EAAsC,EAAtCA,KAAMD,EAAgC,EAAhCA,MAAOjB,EAAyB,EAAzBA,OAAQqB,EAAiB,EAAjBA,YAC5CG,EAA0B,QAAXxB,GACP,UAAXA,GACW,aAAXA,EACH,OACE,sBAAKc,UAAU,mBAAf,UAEc,SAAXd,GAAqB,wBAAQyB,QAASV,EAAjB,mBAEV,SAAXf,GAAqB,wBAAQyB,QAASJ,EAAjB,mBAErBG,GAAgB,wBAAQC,QAAST,EAAMF,UAAU,aAAjC,kBAEjB,wBAAQW,QAASP,EAAjB,kBAEA,wBAAQO,QAASR,EAAOS,GAAG,QAA3B,uBAaSC,EARI,WACjB,OACE,cAAC,IAAD,UACE,cAAC,EAAD,OCrINC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.1ef8bf3b.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport { interval } from \"rxjs\";\nimport { takeWhile } from 'rxjs/operators';\n\n\nconst App = React.memo((props) => {\n\n  const [s, setS] = useState(0);\n  const [m, setM] = useState(0);\n  const [h, setH] = useState(0);\n  const [status, setStatus] = useState(\"stop\");\n  const [touchTime, setTouchTime] = useState(0);\n\n  //useEffect depends on the status \n  useEffect(() => {\n\n    let sub = interval(1000).pipe(\n      takeWhile(() => status === \"run\" || status === \"reset\" || status === \"continue\")\n    ).subscribe((v) => {\n      setS((actual) => actual + 1)\n    });\n    \n    if (status !== \"wait\" && status !== \"continue\") {\n      zeroingStopwatch();\n    }\n\n    return () => {\n      sub.unsubscribe();\n    }\n\n  }, [status]);\n\n  const zeroingStopwatch = () => {\n    setS(0);\n    setM(0);\n    setH(0);\n  }\n  \n  // formatting the stopwatch\n  if (s === 60) {\n    setS(0);\n    setM(actual => actual + 1);\n  }\n  if (m === 60) {\n    setM(0);\n    setH(actual => actual + 1);\n  }\n\n  // functin start starts the stopwatch\n  const start = () => {\n    setStatus(\"run\");\n  };\n\n  // function stop stops and resets the stopwatch\n  const stop = () => {\n    setStatus(\"stop\");\n  };\n  \n  // function reset resets the stopwatch and continues from start(zero)\n  const reset = () => {\n    zeroingStopwatch();\n    setStatus(\"reset\");\n  };\n\n  // function wait pauses the stopwatch (2 clicks, debounce < 300ms)\n  const wait = () => {\n    if (touchTime === 0) {\n      setTouchTime(new Date().getTime());\n    } else {\n      if (new Date().getTime() - touchTime < 300) {\n        setStatus(\"wait\");\n      } else {\n        setTouchTime(new Date().getTime());\n      }\n    }\n  };\n\n  // functin runContinue starts the stopwatch after pause\n  const runContinue = () => {\n    setStatus(\"continue\");\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Stopwatch</h1>\n        <Display s={s} m={m} h={h} />\n        <Buttons\n          start={start}\n          status={status}\n          s={s}\n          stop={stop}\n          reset={reset}\n          wait={wait}\n          runContinue={runContinue}\n        />\n      </div>\n    </div>\n  );\n});\n\nconst Display = ({s, m, h}) => {\n  return (\n    <div className=\"watch\">\n      <span>{h >= 10 ? h : \"0\" + h}</span>\n      &nbsp;:&nbsp;\n      <span>{m >= 10 ? m : \"0\" + m}</span>\n      &nbsp;:&nbsp;\n      <span>{s >= 10 ? s : \"0\" + s}</span>\n    </div>\n  );\n};\n\nconst Buttons = ({start, stop, wait, reset, status, runContinue}) => {\n  const isStopButton = status === \"run\" \n  || status === \"reset\"\n  || status === \"continue\";\n  return (\n    <div className=\"stopWatchButtons\">\n\n      {status === \"stop\" && <button onClick={start}>Start</button>}\n\n      {status === \"wait\" && <button onClick={runContinue}>Start</button>}\n\n      {isStopButton && <button onClick={stop} className=\"stopButton\">Stop</button>}\n\n      <button onClick={wait}>Wait</button>\n\n      <button onClick={reset} id=\"reset\">Reset</button>\n    </div>\n  );\n};\n\nconst AppWrapper = () => {\n  return (\n    <HashRouter>\n      <App />\n    </HashRouter>\n  );\n};\n\nexport default AppWrapper;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}